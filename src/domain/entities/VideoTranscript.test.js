/**
 * VideoTranscript Entity Tests
 * Tests video transcript creation, validation, and metadata handling
 *
 * Copyright (C) 2025 Dimitry Polivaev
 * Licensed under GPL3 or later
 */

const VideoTranscript = require('./VideoTranscript');

describe('VideoTranscript', () => {
  const validContent = 'This is a sample transcript content.';
  const validTitle = 'Sample Video Title';
  const validAuthor = 'Sample Author';
  const validUrl = 'https://www.youtube.com/watch?v=dQw4w9WgXcQ';

  describe('constructor and validation', () => {
    test('should create transcript with all parameters', () => {
      const transcript = new VideoTranscript(
        validContent,
        validTitle,
        validAuthor,
        validUrl,
        'en',
        'Manual Transcript',
        false
      );

      expect(transcript.content).toBe(validContent);
      expect(transcript.title).toBe(validTitle);
      expect(transcript.author).toBe(validAuthor);
      expect(transcript.language).toBe('en');
      expect(transcript.trackName).toBe('Manual Transcript');
      expect(transcript.isAutoGenerated).toBe(false);
      expect(transcript.extractedAt).toBeInstanceOf(Date);
    });

    test('should create transcript with minimal parameters', () => {
      const transcript = new VideoTranscript(validContent);

      expect(transcript.content).toBe(validContent);
      expect(transcript.title).toBe('Unknown Title');
      expect(transcript.author).toBe('Unknown Author');
      expect(transcript.videoUrl).toBeNull();
      expect(transcript.language).toBeNull();
      expect(transcript.trackName).toBeNull();
      expect(transcript.isAutoGenerated).toBe(false);
    });

    test('should create transcript with URL as VideoUrl object', () => {
      const transcript = new VideoTranscript(validContent, validTitle, validAuthor, validUrl);
      expect(transcript.hasVideoUrl()).toBe(true);
      expect(transcript.videoUrl.toString()).toBe(validUrl);
    });

    test('should handle null URL', () => {
      const transcript = new VideoTranscript(validContent, validTitle, validAuthor, null);
      expect(transcript.hasVideoUrl()).toBe(false);
      expect(transcript.videoUrl).toBeNull();
    });

    test('should reject null or undefined content', () => {
      expect(() => new VideoTranscript(null)).toThrow('Transcript content must be a non-empty string');
      expect(() => new VideoTranscript(undefined)).toThrow('Transcript content must be a non-empty string');
    });

    test('should reject non-string content', () => {
      expect(() => new VideoTranscript(123)).toThrow('Transcript content must be a non-empty string');
      expect(() => new VideoTranscript({})).toThrow('Transcript content must be a non-empty string');
      expect(() => new VideoTranscript([])).toThrow('Transcript content must be a non-empty string');
    });

    test('should reject empty or whitespace-only content', () => {
      expect(() => new VideoTranscript('')).toThrow('Transcript content must be a non-empty string');
      expect(() => new VideoTranscript('   ')).toThrow('Transcript content cannot be empty');
      expect(() => new VideoTranscript('\n\t  \n')).toThrow('Transcript content cannot be empty');
    });

    test('should convert isAutoGenerated to boolean', () => {
      const autoGenerated = new VideoTranscript(validContent, validTitle, validAuthor, validUrl, 'en', 'track', 'truthy');
      const manual = new VideoTranscript(validContent, validTitle, validAuthor, validUrl, 'en', 'track', 0);

      expect(autoGenerated.isAutoGenerated).toBe(true);
      expect(manual.isAutoGenerated).toBe(false);
    });
  });

  describe('content analysis', () => {
    test('should count words correctly', () => {
      const content = 'Hello world this is a test';
      const transcript = new VideoTranscript(content);
      expect(transcript.getWordCount()).toBe(6);
    });

    test('should count words with extra whitespace', () => {
      const content = '  Hello   world  \n\n  this    is   a test  ';
      const transcript = new VideoTranscript(content);
      expect(transcript.getWordCount()).toBe(6);
    });

    test('should count characters correctly', () => {
      const content = 'Hello world!';
      const transcript = new VideoTranscript(content);
      expect(transcript.getCharacterCount()).toBe(12);
    });

    test('should detect empty content', () => {
      const content = 'Not empty';
      const transcript = new VideoTranscript(content);
      expect(transcript.isEmpty()).toBe(false);
    });

    test('should handle single character content', () => {
      const content = 'A';
      const transcript = new VideoTranscript(content);
      expect(transcript.getWordCount()).toBe(1);
      expect(transcript.getCharacterCount()).toBe(1);
      expect(transcript.isEmpty()).toBe(false);
    });
  });

  describe('video URL handling', () => {
    test('should detect presence of video URL', () => {
      const withUrl = new VideoTranscript(validContent, validTitle, validAuthor, validUrl);
      const withoutUrl = new VideoTranscript(validContent, validTitle, validAuthor);

      expect(withUrl.hasVideoUrl()).toBe(true);
      expect(withoutUrl.hasVideoUrl()).toBe(false);
    });

    test('should extract video ID from URL', () => {
      const transcript = new VideoTranscript(validContent, validTitle, validAuthor, validUrl);
      expect(transcript.getVideoId()).toBe('dQw4w9WgXcQ');
    });

    test('should return null video ID when no URL', () => {
      const transcript = new VideoTranscript(validContent);
      expect(transcript.getVideoId()).toBeNull();
    });

    test('should handle shorts URL', () => {
      const shortsUrl = 'https://www.youtube.com/shorts/abc123';
      const transcript = new VideoTranscript(validContent, validTitle, validAuthor, shortsUrl);
      expect(transcript.getVideoId()).toBe('abc123');
    });
  });

  describe('subtitle content generation', () => {
    test('should generate formatted subtitle content', () => {
      const transcript = new VideoTranscript(validContent, validTitle, validAuthor);
      const subtitleContent = transcript.toSubtitleContent();

      expect(subtitleContent).toContain(`Video Title: ${validTitle}`);
      expect(subtitleContent).toContain(`Transcript Content:`);
      expect(subtitleContent).toContain(validContent);
    });

    test('should handle unknown title in subtitle content', () => {
      const transcript = new VideoTranscript(validContent);
      const subtitleContent = transcript.toSubtitleContent();

      expect(subtitleContent).toContain('Video Title: Unknown Title');
    });
  });

  describe('metadata extraction', () => {
    test('should extract complete metadata', () => {
      const transcript = new VideoTranscript(
        validContent,
        validTitle,
        validAuthor,
        validUrl,
        'en',
        'Manual Track',
        false
      );

      const metadata = transcript.toMetadata();

      expect(metadata.title).toBe(validTitle);
      expect(metadata.author).toBe(validAuthor);
      expect(metadata.url).toBe(validUrl);
      expect(metadata.language).toBe('en');
      expect(metadata.trackName).toBe('Manual Track');
      expect(metadata.isAutoGenerated).toBe(false);
      expect(metadata.extractedAt).toBeInstanceOf(Date);
      expect(metadata.wordCount).toBe(transcript.getWordCount());
      expect(metadata.characterCount).toBe(transcript.getCharacterCount());
    });

    test('should handle null values in metadata', () => {
      const transcript = new VideoTranscript(validContent);
      const metadata = transcript.toMetadata();

      expect(metadata.url).toBeNull();
      expect(metadata.language).toBeNull();
      expect(metadata.trackName).toBeNull();
    });
  });

  describe('factory method', () => {
    test('should create from extracted data', () => {
      const extractedData = {
        transcript: validContent,
        title: validTitle,
        author: validAuthor,
        url: validUrl,
        language: 'en',
        trackName: 'Auto-generated',
        isAutoGenerated: true
      };

      const transcript = VideoTranscript.fromExtractedData(extractedData);

      expect(transcript.content).toBe(validContent);
      expect(transcript.title).toBe(validTitle);
      expect(transcript.author).toBe(validAuthor);
      expect(transcript.videoUrl.toString()).toBe(validUrl);
      expect(transcript.language).toBe('en');
      expect(transcript.trackName).toBe('Auto-generated');
      expect(transcript.isAutoGenerated).toBe(true);
    });

    test('should create from minimal extracted data', () => {
      const extractedData = {
        transcript: validContent
      };

      const transcript = VideoTranscript.fromExtractedData(extractedData);

      expect(transcript.content).toBe(validContent);
      expect(transcript.title).toBe('Unknown Title');
      expect(transcript.author).toBe('Unknown Author');
    });
  });

  describe('edge cases and error conditions', () => {
    test('should handle very long content', () => {
      const longContent = 'A '.repeat(10000);
      const transcript = new VideoTranscript(longContent);

      expect(transcript.getWordCount()).toBe(10000);
      expect(transcript.getCharacterCount()).toBe(longContent.length);
    });

    test('should handle special characters in content', () => {
      const specialContent = 'Hello! @#$%^&*()_+ 世界 🌍 \n\t';
      const transcript = new VideoTranscript(specialContent);

      expect(transcript.content).toBe(specialContent);
      expect(transcript.getCharacterCount()).toBe(specialContent.length);
    });

    test('should handle multiline content', () => {
      const multilineContent = 'Line 1\nLine 2\nLine 3';
      const transcript = new VideoTranscript(multilineContent);

      expect(transcript.content).toBe(multilineContent);
      expect(transcript.getWordCount()).toBe(6);
    });

    test('should handle content with only punctuation', () => {
      const punctuationContent = '!@#$%^&*()_+{}|:"<>?[];\'\\,./-=';
      const transcript = new VideoTranscript(punctuationContent);

      expect(transcript.content).toBe(punctuationContent);
      expect(transcript.getWordCount()).toBe(1); // Punctuation without spaces counts as one "word"
    });
  });

  describe('timestamp handling', () => {
    test('should set extraction timestamp on creation', () => {
      const before = new Date();
      const transcript = new VideoTranscript(validContent);
      const after = new Date();

      expect(transcript.extractedAt.getTime()).toBeGreaterThanOrEqual(before.getTime());
      expect(transcript.extractedAt.getTime()).toBeLessThanOrEqual(after.getTime());
    });
  });
});