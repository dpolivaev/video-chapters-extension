/**
 * ChapterGeneration Entity
 * Represents a chapter generation request and its lifecycle
 *
 * Copyright (C) 2025 Dimitry Polivaev
 * Licensed under GPL3 or later
 */

class ChapterGeneration {
  constructor(videoTranscript, modelId, customInstructions = '') {
    this.id = this.generateId();
    this.videoTranscript = this.validateVideoTranscript(videoTranscript);
    this.modelId = new ModelId(modelId);
    this.customInstructions = customInstructions.trim();
    this.status = 'pending';
    this.chapters = null;
    this.error = null;
    this.createdAt = new Date();
    this.completedAt = null;
  }
  
  generateId() {
    return ChapterGeneration.generateRandomId();
  }
  
  static generateRandomId() {
    const RANDOM_BITS = 17;
    const TIMESTAMP_SEPARATION_BITS = 35;
    
    const timestamp = Date.now();
    const randomBits = Math.floor(Math.random() * Math.pow(2, RANDOM_BITS));
    return timestamp + (randomBits * Math.pow(2, TIMESTAMP_SEPARATION_BITS));
  }
  
  validateVideoTranscript(transcript) {
    if (!(transcript instanceof VideoTranscript)) {
      throw new Error('videoTranscript must be a VideoTranscript instance');
    }
    return transcript;
  }
  
  markCompleted(chapters) {
    if (this.status !== 'pending') {
      throw new Error(`Cannot complete generation with status: ${this.status}`);
    }
    
    if (!chapters || typeof chapters !== 'string') {
      throw new Error('Chapters must be a non-empty string');
    }
    
    this.status = 'completed';
    this.chapters = chapters.trim();
    this.completedAt = new Date();
    this.error = null;
  }
  
  markFailed(error) {
    if (this.status !== 'pending') {
      throw new Error(`Cannot fail generation with status: ${this.status}`);
    }
    
    this.status = 'failed';
    this.error = error instanceof Error ? error.message : String(error);
    this.completedAt = new Date();
    this.chapters = null;
  }
  
  isPending() {
    return this.status === 'pending';
  }
  
  isCompleted() {
    return this.status === 'completed';
  }
  
  isFailed() {
    return this.status === 'failed';
  }
  
  hasCustomInstructions() {
    return this.customInstructions.length > 0;
  }
  
  getDurationMs() {
    const endTime = this.completedAt || new Date();
    return endTime.getTime() - this.createdAt.getTime();
  }
  
  getDurationSeconds() {
    return Math.floor(this.getDurationMs() / 1000);
  }
  
  getVideoMetadata() {
    return this.videoTranscript.toMetadata();
  }
  
  toSessionResults() {
    return {
      resultId: this.id,
      subtitles: {
        content: this.videoTranscript.content,
        language: this.videoTranscript.language,
        trackName: this.videoTranscript.trackName,
        isAutoGenerated: this.videoTranscript.isAutoGenerated
      },
      chapters: this.chapters || this.videoTranscript.videoUrl?.toString() || '',
      timestamp: this.createdAt.getTime(),
      model: this.modelId.toString(),
      customInstructions: this.customInstructions,
      videoMetadata: this.getVideoMetadata(),
      status: this.status,
      error: this.error
    };
  }
  
  static fromSessionResults(results) {
    const videoTranscript = new VideoTranscript(
      results.subtitles?.content || '',
      results.videoMetadata?.title || 'Unknown Title',
      results.videoMetadata?.author || 'Unknown Author',
      results.videoMetadata?.url,
      results.subtitles?.language,
      results.subtitles?.trackName,
      results.subtitles?.isAutoGenerated
    );
    
    const generation = new ChapterGeneration(
      videoTranscript,
      results.model || 'unknown',
      results.customInstructions || ''
    );
    
    generation.id = results.resultId;
    generation.createdAt = new Date(results.timestamp);
    
    if (results.error) {
      generation.markFailed(results.error);
    } else if (results.chapters && results.chapters !== results.videoMetadata?.url) {
      generation.markCompleted(results.chapters);
    }
    
    return generation;
  }
}

