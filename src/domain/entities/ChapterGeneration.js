/**
 * ChapterGeneration Entity
 * Represents a chapter generation request and its lifecycle
 *
 * Copyright (C) 2025 Dimitry Polivaev
 * Licensed under GPL3 or later
 */

// Load ModelId for Node.js environment (tests), skip if already loaded in browser
if (typeof ModelId === 'undefined' && typeof require !== 'undefined') {
  const ModelId = require('../values/ModelId');
}

class ChapterGeneration {
  constructor(videoTranscript, modelId, customInstructions = '') {
    this.id = this.generateId();
    this.videoTranscript = this.validateVideoTranscript(videoTranscript);
    this.modelId = this.validateModelId(modelId);
    this.customInstructions = customInstructions.trim();
    this.status = 'pending';
    this.chapters = null;
    this.error = null;
    this.createdAt = new Date();
    this.completedAt = null;
  }

  generateId() {
    return ChapterGeneration.generateRandomId();
  }

  static generateRandomId() {
    const RANDOM_BITS = 17;
    const TIMESTAMP_SEPARATION_BITS = 35;

    const timestamp = Date.now();
    const randomBits = Math.floor(Math.random() * Math.pow(2, RANDOM_BITS));
    return timestamp + (randomBits * Math.pow(2, TIMESTAMP_SEPARATION_BITS));
  }

  validateVideoTranscript(transcript) {
    if (!(transcript instanceof VideoTranscript)) {
      throw new Error('videoTranscript must be a VideoTranscript instance');
    }
    return transcript;
  }

  validateModelId(modelId) {
    if (!modelId || !(modelId instanceof ModelId)) {
      throw new Error('modelId must be a ModelId instance');
    }
    return modelId;
  }

  markCompleted(chapters) {
    if (this.status !== 'pending') {
      throw new Error(`Cannot complete generation with status: ${this.status}`);
    }

    if (!chapters || typeof chapters !== 'string') {
      throw new Error('Chapters must be a non-empty string');
    }

    this.status = 'completed';
    this.chapters = chapters.trim();
    this.completedAt = new Date();
    this.error = null;
  }

  markFailed(error) {
    if (this.status !== 'pending') {
      throw new Error(`Cannot fail generation with status: ${this.status}`);
    }

    this.status = 'failed';
    this.error = error instanceof Error ? error.message : String(error);
    this.completedAt = new Date();
    this.chapters = null;
  }

  isPending() {
    return this.status === 'pending';
  }

  isCompleted() {
    return this.status === 'completed';
  }

  isFailed() {
    return this.status === 'failed';
  }

  hasCustomInstructions() {
    return this.customInstructions.length > 0;
  }

  getDurationMs() {
    const endTime = this.completedAt || new Date();
    return endTime.getTime() - this.createdAt.getTime();
  }

  getDurationSeconds() {
    return Math.floor(this.getDurationMs() / 1000);
  }

  getVideoMetadata() {
    return this.videoTranscript.toMetadata();
  }

  toSessionResults() {
    return {
      resultId: this.id,
      processedContent: {
        content: this.videoTranscript.content,
        language: this.videoTranscript.language,
        trackName: this.videoTranscript.trackName,
        isAutoGenerated: this.videoTranscript.isAutoGenerated
      },
      chapters: this.chapters || this.videoTranscript.videoUrl?.toString() || '',
      timestamp: this.createdAt.getTime(),
      model: this.modelId.toJSON(),
      customInstructions: this.customInstructions,
      videoMetadata: this.getVideoMetadata(),
      status: this.status,
      error: this.error
    };
  }

  static fromSessionResults(results) {
    const videoTranscript = new VideoTranscript(
      results.processedContent?.content || '',
      results.videoMetadata?.title || 'Unknown Title',
      results.videoMetadata?.author || 'Unknown Author',
      results.videoMetadata?.url,
      results.processedContent?.language,
      results.processedContent?.trackName,
      results.processedContent?.isAutoGenerated
    );

    // Convert legacy string model to ModelId object
    let modelId;
    if (results.model && typeof results.model === 'string') {
      // For legacy session data, try to determine provider from model string
      if (results.model.includes('gemini')) {
        modelId = new ModelId(results.model, 'Gemini', false);
      } else if (results.model.includes('/')) {
        // Looks like OpenRouter format
        const isFree = results.model.includes(':free');
        modelId = new ModelId(results.model, 'OpenRouter', isFree);
      } else {
        // Unknown format, use default
        modelId = ModelId.getDefault();
      }
    } else if (results.model && typeof results.model === 'object') {
      // Already a ModelId object or object format
      modelId = ModelId.fromJSON(results.model);
    } else {
      // No model information
      modelId = ModelId.getDefault();
    }

    const generation = new ChapterGeneration(
      videoTranscript,
      modelId,
      results.customInstructions || ''
    );

    generation.id = results.resultId;
    generation.createdAt = new Date(results.timestamp);

    if (results.error) {
      generation.markFailed(results.error);
    } else if (results.chapters && results.chapters !== results.videoMetadata?.url) {
      generation.markCompleted(results.chapters);
    }

    return generation;
  }
}

if (typeof module !== 'undefined' && module.exports) {
  module.exports = ChapterGeneration;
}

