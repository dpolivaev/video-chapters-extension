/**
 * VideoTranscript Entity
 * Represents a video transcript with metadata
 *
 * Copyright (C) 2025 Dimitry Polivaev
 * Licensed under GPL3 or later
 */

let VideoUrl;

function isNodeJsEnvironment() {
  return typeof require !== 'undefined' && typeof module !== 'undefined';
}

if (isNodeJsEnvironment()) {
  VideoUrl = require('../values/VideoUrl');
}

class VideoTranscript {
  constructor(content, title, author, videoUrl, language = null, trackName = null, isAutoGenerated = false) {
    this.content = this.validateContent(content);
    this.title = title || 'Unknown Title';
    this.author = author || 'Unknown Author';
    this.videoUrl = videoUrl ? new VideoUrl(videoUrl) : null;
    this.language = language;
    this.trackName = trackName;
    this.isAutoGenerated = Boolean(isAutoGenerated);
    this.extractedAt = new Date();
  }
  
  validateContent(content) {
    if (!content || typeof content !== 'string') {
      throw new Error('Transcript content must be a non-empty string');
    }
    
    if (content.trim().length === 0) {
      throw new Error('Transcript content cannot be empty');
    }
    
    return content;
  }
  
  toSubtitleContent() {
    return `Video Title: ${this.title}\n\nTranscript Content:\n${this.content}`;
  }
  
  getWordCount() {
    return this.content.split(/\s+/).filter(word => word.length > 0).length;
  }
  
  getCharacterCount() {
    return this.content.length;
  }
  
  isEmpty() {
    return this.content.trim().length === 0;
  }
  
  hasVideoUrl() {
    return this.videoUrl !== null;
  }
  
  getVideoId() {
    return this.videoUrl ? this.videoUrl.getVideoId() : null;
  }
  
  toMetadata() {
    return {
      title: this.title,
      author: this.author,
      url: this.videoUrl ? this.videoUrl.toString() : null,
      language: this.language,
      trackName: this.trackName,
      isAutoGenerated: this.isAutoGenerated,
      extractedAt: this.extractedAt,
      wordCount: this.getWordCount(),
      characterCount: this.getCharacterCount()
    };
  }
  
  static fromExtractedData(extractedData) {
    return new VideoTranscript(
      extractedData.transcript,
      extractedData.title,
      extractedData.author,
      extractedData.url,
      extractedData.language,
      extractedData.trackName,
      extractedData.isAutoGenerated
    );
  }
  
}

if (typeof module !== 'undefined' && module.exports) {
  module.exports = VideoTranscript;
}


