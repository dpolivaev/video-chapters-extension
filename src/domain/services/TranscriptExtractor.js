/**
 * TranscriptExtractor Domain Service
 * Extracts video transcripts from YouTube pages
 *
 * Copyright (C) 2025 Dimitry Polivaev
 * Licensed under GPL3 or later
 */

class TranscriptExtractor {
  constructor(browserAPI = browser) {
    this.browser = browserAPI;
  }
  
  async extractFromTab(tabId) {
    if (!Number.isInteger(tabId) || tabId < 0) {
      throw new Error('Invalid tab ID');
    }
    
    try {
      const response = await this.browser.tabs.sendMessage(tabId, {
        action: "copyTranscript"
      });
      
      if (response?.status === "success" && response.transcript) {
        return VideoTranscript.fromExtractedData({
          transcript: response.transcript,
          title: response.title || 'Unknown Title',
          author: response.author || 'Unknown Author',
          url: response.url,
          language: response.language,
          trackName: response.trackName,
          isAutoGenerated: response.isAutoGenerated || false
        });
      }
      
      throw new Error(response?.message || 'Failed to extract transcript from tab');
    } catch (error) {
      if (error.message.includes('Could not establish connection')) {
        throw new Error('Unable to access YouTube page. Please refresh the page and try again.');
      }
      
      if (error.message.includes('Extension context invalidated')) {
        throw new Error('Extension was reloaded. Please refresh the page and try again.');
      }
      
      throw new Error(`Transcript extraction failed: ${error.message}`);
    }
  }
  
  async canExtractFromTab(tabId) {
    try {
      const tab = await this.browser.tabs.get(tabId);
      return this.isYouTubePage(tab.url);
    } catch (error) {
      return false;
    }
  }
  
  isYouTubePage(url) {
    if (!url) return false;
    return url.includes('youtube.com/watch') || url.includes('youtube.com/shorts');
  }
  
  async extractFromCurrentTab() {
    try {
      const [tab] = await this.browser.tabs.query({
        active: true,
        currentWindow: true
      });
      
      if (!tab) {
        throw new Error('No active tab found');
      }
      
      if (!this.isYouTubePage(tab.url)) {
        throw new Error('Current tab is not a YouTube video page');
      }
      
      return this.extractFromTab(tab.id);
    } catch (error) {
      throw new Error(`Failed to extract from current tab: ${error.message}`);
    }
  }
}

if (typeof module !== 'undefined' && module.exports) {
  module.exports = TranscriptExtractor;
}


